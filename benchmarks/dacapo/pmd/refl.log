Class.forName;java.security.MessageDigestSpi;java.security.Security.getSpiClass;675;;
Class.forName;net.sourceforge.pmd.PMD;org.dacapo.harness.Pmd.<init>;32;;
Class.forName;org.apache.xerces.parsers.ObjectFactory;org.apache.xerces.parsers.ObjectFactory.class$;;;
Class.forName;org.dacapo.harness.Pmd;org.dacapo.harness.TestHarness.findClass;248;;
Class.forName;org.jaxen.saxpath.XPathReader;org.jaxen.saxpath.helpers.XPathReaderFactory.class$;139;;
Class.forName;org.jaxen.saxpath.base.XPathReader;org.jaxen.saxpath.helpers.XPathReaderFactory.createReader;137;;
Class.forName;org.jaxen.saxpath.helpers.XPathReaderFactory;org.jaxen.saxpath.helpers.XPathReaderFactory.class$;139;;
Class.forName;sun.net.www.protocol.jar.Handler;java.net.URL.getURLStreamHandler;1223;;
Class.forName;sun.security.provider.SHA;java.security.Provider$Service.getImplClass;1634;;
Class.getMethods;net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration;net.sourceforge.pmd.jaxen.AttributeAxisIterator.<init>;47;;
Class.getMethods;net.sourceforge.pmd.ast.ASTClassOrInterfaceType;net.sourceforge.pmd.jaxen.AttributeAxisIterator.<init>;47;;
Class.getMethods;net.sourceforge.pmd.ast.ASTPrimarySuffix;net.sourceforge.pmd.jaxen.AttributeAxisIterator.<init>;47;;
Class.newInstance;net.sourceforge.pmd.rules.DoubleCheckedLocking;net.sourceforge.pmd.RuleSetFactory.parseSingleRuleNode;309;;
Class.newInstance;net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode;net.sourceforge.pmd.RuleSetFactory.parseSingleRuleNode;309;;
Class.newInstance;net.sourceforge.pmd.rules.UnnecessaryConversionTemporary;net.sourceforge.pmd.RuleSetFactory.parseSingleRuleNode;309;;
Class.newInstance;net.sourceforge.pmd.rules.UselessOperationOnImmutable;net.sourceforge.pmd.RuleSetFactory.parseSingleRuleNode;309;;
Class.newInstance;net.sourceforge.pmd.rules.UselessOverridingMethod;net.sourceforge.pmd.RuleSetFactory.parseSingleRuleNode;309;;
Class.newInstance;net.sourceforge.pmd.rules.XPathRule;net.sourceforge.pmd.RuleSetFactory.parseSingleRuleNode;309;;
Class.newInstance;net.sourceforge.pmd.rules.basic.AvoidMultipleUnaryOperators;net.sourceforge.pmd.RuleSetFactory.parseSingleRuleNode;309;;
Class.newInstance;net.sourceforge.pmd.rules.basic.AvoidUsingHardCodedIP;net.sourceforge.pmd.RuleSetFactory.parseSingleRuleNode;309;;
Class.newInstance;net.sourceforge.pmd.rules.basic.AvoidUsingOctalValues;net.sourceforge.pmd.RuleSetFactory.parseSingleRuleNode;309;;
Class.newInstance;net.sourceforge.pmd.rules.basic.BigIntegerInstantiation;net.sourceforge.pmd.RuleSetFactory.parseSingleRuleNode;309;;
Class.newInstance;net.sourceforge.pmd.rules.basic.BooleanInstantiation;net.sourceforge.pmd.RuleSetFactory.parseSingleRuleNode;309;;
Class.newInstance;net.sourceforge.pmd.rules.basic.BrokenNullCheck;net.sourceforge.pmd.RuleSetFactory.parseSingleRuleNode;309;;
Class.newInstance;net.sourceforge.pmd.rules.basic.UnnecessaryReturn;net.sourceforge.pmd.RuleSetFactory.parseSingleRuleNode;309;;
Class.newInstance;org.apache.xerces.impl.dv.dtd.DTDDVFactoryImpl;org.apache.xerces.impl.dv.ObjectFactory.newInstance;;;
Class.newInstance;org.apache.xerces.jaxp.DocumentBuilderFactoryImpl;javax.xml.parsers.FactoryFinder.newInstance;;;
Class.newInstance;org.apache.xerces.parsers.XIncludeAwareParserConfiguration;org.apache.xerces.parsers.ObjectFactory.newInstance;;;
Class.newInstance;org.jaxen.saxpath.base.XPathReader;org.jaxen.saxpath.helpers.XPathReaderFactory.createReader;157;;
Class.newInstance;sun.net.www.protocol.jar.Handler;java.net.URL.getURLStreamHandler;1232;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$6fa76d2fd361585c5fe3433964828b14710d5895;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$bf67be7aa2fba0e0c4125f99f7ac27c22b632870;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor$HASHED$0fe886932b69b97b98f9625dd69006a3475e7188;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.security.provider.Sun;sun.security.jca.ProviderConfig$2.run;221;;
Class.newInstance;sun.text.resources.FormatData;java.util.ResourceBundle$Control.newBundle;2662;;
Class.newInstance;sun.text.resources.en.FormatData_en;java.util.ResourceBundle$Control.newBundle;2662;;
Constructor.newInstance;<net.sourceforge.pmd.rules.DoubleCheckedLocking: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<net.sourceforge.pmd.rules.OverrideBothEqualsAndHashcode: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<net.sourceforge.pmd.rules.UnnecessaryConversionTemporary: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<net.sourceforge.pmd.rules.UselessOperationOnImmutable: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<net.sourceforge.pmd.rules.UselessOverridingMethod: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<net.sourceforge.pmd.rules.XPathRule: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<net.sourceforge.pmd.rules.basic.AvoidMultipleUnaryOperators: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<net.sourceforge.pmd.rules.basic.AvoidUsingHardCodedIP: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<net.sourceforge.pmd.rules.basic.AvoidUsingOctalValues: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<net.sourceforge.pmd.rules.basic.BigIntegerInstantiation: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<net.sourceforge.pmd.rules.basic.BooleanInstantiation: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<net.sourceforge.pmd.rules.basic.BrokenNullCheck: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<net.sourceforge.pmd.rules.basic.UnnecessaryReturn: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xerces.impl.dv.dtd.DTDDVFactoryImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xerces.jaxp.DocumentBuilderFactoryImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xerces.parsers.XIncludeAwareParserConfiguration: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.dacapo.harness.Pmd: void <init>(org.dacapo.parser.Config,java.io.File)>;org.dacapo.harness.TestHarness.runBenchmark;192;isAccessible=false;
Constructor.newInstance;<org.jaxen.saxpath.base.XPathReader: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.net.www.protocol.jar.Handler: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$6fa76d2fd361585c5fe3433964828b14710d5895: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$bf67be7aa2fba0e0c4125f99f7ac27c22b632870: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor$HASHED$0fe886932b69b97b98f9625dd69006a3475e7188: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.security.provider.SHA: void <init>()>;java.security.Provider$Service.newInstance;1595;isAccessible=false;
Constructor.newInstance;<sun.security.provider.Sun: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.FormatData: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.en.FormatData_en: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Method.getDeclaringClass;<java.lang.Object: boolean equals(java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: boolean equals(java.lang.Object)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: int hashCode()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: int hashCode()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.Class getClass()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.Class getClass()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.String toString()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.String toString()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notify()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notify()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notifyAll()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notifyAll()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long,int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long,int)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: boolean isInterface()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: boolean isInterface()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: boolean isNested()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: boolean isNested()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: void dump(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: void dump(java.lang.String)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: void setInterface()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: void setInterface()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTClassOrInterfaceType: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTClassOrInterfaceType: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTPrimarySuffix: boolean isArguments()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTPrimarySuffix: boolean isArguments()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTPrimarySuffix: boolean isArrayDereference()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTPrimarySuffix: boolean isArrayDereference()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTPrimarySuffix: int getArgumentCount()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTPrimarySuffix: int getArgumentCount()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTPrimarySuffix: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTPrimarySuffix: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTPrimarySuffix: void dump(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTPrimarySuffix: void dump(java.lang.String)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTPrimarySuffix: void setIsArguments()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTPrimarySuffix: void setIsArguments()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTPrimarySuffix: void setIsArrayDereference()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.ASTPrimarySuffix: void setIsArrayDereference()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.JavaNode: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.Node: int jjtGetNumChildren()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.Node: net.sourceforge.pmd.ast.Node jjtGetChild(int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.Node: net.sourceforge.pmd.ast.Node jjtGetParent()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.Node: void jjtAddChild(net.sourceforge.pmd.ast.Node,int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.Node: void jjtClose()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.Node: void jjtOpen()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.Node: void jjtSetParent(net.sourceforge.pmd.ast.Node)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isAbstract()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isAbstract()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isFinal()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isFinal()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isNative()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isNative()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isPackagePrivate()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isPackagePrivate()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isPrivate()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isPrivate()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isProtected()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isProtected()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isPublic()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isPublic()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isStatic()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isStatic()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isStrictfp()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isStrictfp()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isSynchronized()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isSynchronized()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isTransient()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isTransient()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isVolatile()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isVolatile()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: int getModifiers()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: int getModifiers()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: java.lang.String collectDumpedModifiers(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: java.lang.String collectDumpedModifiers(java.lang.String)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setAbstract()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setAbstract()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setAbstract(boolean)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setAbstract(boolean)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setFinal()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setFinal()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setFinal(boolean)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setFinal(boolean)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setModifiers(int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setModifiers(int)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setNative()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setNative()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setNative(boolean)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setNative(boolean)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setPrivate()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setPrivate()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setPrivate(boolean)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setPrivate(boolean)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setProtected()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setProtected()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setProtected(boolean)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setProtected(boolean)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setPublic()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setPublic()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setPublic(boolean)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setPublic(boolean)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setStatic()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setStatic()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setStatic(boolean)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setStatic(boolean)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setStrictfp()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setStrictfp()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setStrictfp(boolean)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setStrictfp(boolean)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setSynchronized()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setSynchronized()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setSynchronized(boolean)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setSynchronized(boolean)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setTransient()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setTransient()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setTransient(boolean)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setTransient(boolean)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setVolatile()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setVolatile()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setVolatile(boolean)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: void setVolatile(boolean)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessTypeNode: java.lang.Class getType()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessTypeNode: java.lang.Class getType()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessTypeNode: void setType(java.lang.Class)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaAccessTypeNode: void setType(java.lang.Class)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaNode: java.lang.Object childrenAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaNode: java.lang.Object childrenAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaNode: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaNode: java.lang.Object jjtAccept(net.sourceforge.pmd.ast.JavaParserVisitor,java.lang.Object)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaNode: java.lang.String toString()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaNode: java.lang.String toString()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaNode: void jjtClose()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaNode: void jjtClose()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaNode: void jjtOpen()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaNode: void jjtOpen()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaTypeNode: java.lang.Class getType()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaTypeNode: java.lang.Class getType()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaTypeNode: void setType(java.lang.Class)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleJavaTypeNode: void setType(java.lang.Class)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: boolean containsChildOfType(java.lang.Class)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: boolean containsChildOfType(java.lang.Class)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: boolean hasImageEqualTo(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: boolean hasImageEqualTo(java.lang.String)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: int getBeginColumn()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: int getBeginColumn()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: int getBeginLine()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: int getBeginLine()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: int getEndColumn()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: int getEndColumn()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: int getEndLine()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: int getEndLine()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: int jjtGetNumChildren()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: int jjtGetNumChildren()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: java.lang.Object getFirstChildOfType(java.lang.Class)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: java.lang.Object getFirstChildOfType(java.lang.Class)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: java.lang.Object getFirstParentOfType(java.lang.Class)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: java.lang.Object getFirstParentOfType(java.lang.Class)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: java.lang.String getImage()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: java.lang.String getImage()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: java.lang.String getImage()>;sun.reflect.NativeMethodAccessorImpl.invoke;50;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: java.lang.String getImage()>;sun.reflect.NativeMethodAccessorImpl.invoke;53;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: java.lang.String getLabel()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: java.lang.String getLabel()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: java.lang.String toString(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: java.lang.String toString(java.lang.String)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: java.util.List findChildNodesWithXPath(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: java.util.List findChildNodesWithXPath(java.lang.String)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: java.util.List findChildrenOfType(java.lang.Class)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: java.util.List findChildrenOfType(java.lang.Class)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: java.util.List getParentsOfType(java.lang.Class)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: java.util.List getParentsOfType(java.lang.Class)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.ast.Node getNthParent(int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.ast.Node getNthParent(int)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.ast.Node jjtGetChild(int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.ast.Node jjtGetChild(int)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.ast.Node jjtGetParent()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.ast.Node jjtGetParent()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.dfa.IDataFlowNode getDataFlowNode()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.dfa.IDataFlowNode getDataFlowNode()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.symboltable.Scope getScope()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: net.sourceforge.pmd.symboltable.Scope getScope()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: org.w3c.dom.Document asXml()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: org.w3c.dom.Document asXml()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void dump(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void dump(java.lang.String)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void findChildrenOfType(java.lang.Class,java.util.List)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void findChildrenOfType(java.lang.Class,java.util.List)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void findChildrenOfType(java.lang.Class,java.util.List,boolean)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void findChildrenOfType(java.lang.Class,java.util.List,boolean)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void jjtAddChild(net.sourceforge.pmd.ast.Node,int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void jjtAddChild(net.sourceforge.pmd.ast.Node,int)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void jjtSetParent(net.sourceforge.pmd.ast.Node)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void jjtSetParent(net.sourceforge.pmd.ast.Node)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void setDataFlowNode(net.sourceforge.pmd.dfa.IDataFlowNode)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void setDataFlowNode(net.sourceforge.pmd.dfa.IDataFlowNode)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void setImage(java.lang.String)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void setImage(java.lang.String)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void setScope(net.sourceforge.pmd.symboltable.Scope)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void setScope(net.sourceforge.pmd.symboltable.Scope)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void testingOnly__setBeginColumn(int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void testingOnly__setBeginColumn(int)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void testingOnly__setBeginLine(int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<net.sourceforge.pmd.ast.SimpleNode: void testingOnly__setBeginLine(int)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.invoke;<net.sourceforge.pmd.PMD: void main(java.lang.String[])>;org.dacapo.harness.Pmd.iterate;58;isAccessible=false;
Method.invoke;<net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration: boolean isInterface()>;net.sourceforge.pmd.jaxen.Attribute.getValue;30;isAccessible=false;
Method.invoke;<net.sourceforge.pmd.ast.SimpleJavaAccessNode: boolean isFinal()>;net.sourceforge.pmd.jaxen.Attribute.getValue;30;isAccessible=false;
Method.invoke;<net.sourceforge.pmd.ast.SimpleNode: java.lang.String getImage()>;net.sourceforge.pmd.jaxen.Attribute.getValue;30;isAccessible=false;
Method.invoke;<org.dacapo.harness.TestHarness: void main(java.lang.String[])>;Harness.main;;isAccessible=false;
